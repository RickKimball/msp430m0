//------------------------------------------------------------------------
// blinky - msp430m0 arm m0 instructions running on msp430fr6989 launchpad
//
#include <inttypes.h>

#define BIT0 (1<<0)
#define BIT3 (1<<3)

//------------------------------------------------------------------------
// GPIO_Type - fake GPIO peripheral wired to 8 bit P1,P2,P3 ports
typedef struct {
    volatile unsigned INR;      // 8 bit input pin register
    volatile unsigned ODR;      // 8 bit output pin register
    volatile unsigned MODER;    // 8 bit pin mode register
    volatile unsigned BSRR;     // 16 bit bit set / reset register 
    volatile unsigned TOGGLER;  // 8 bit toggle pin register
} GPIO_Type ;

//------------------------------------------------------------------------
// PWM_Type - fake PWM peripheral 
typedef struct {
  volatile uint32_t CR;         // control register
                                // 31 en, 30,29 mode, 8..16 port, 0..7 pin
  volatile uint32_t PERIODR;    // period register
  volatile uint32_t DUTYR;      // duty register 0..100
} PWM_Type;

#define PWM_CR_EN             (1<<31)
#define PWM_CR_DUTY_HZ        (0b10<<29)
#define PWM_CR_DUTY_PERCENT   (0b01<<29)
#define PWM_CR_P1_PIN0        ((1<<8)|(1<<0))   /* P1.0 used for PWM */

#define PERIPHERAL_BASE         0x40000000
#define P1_BASE                 0x40001000
#define P2_BASE                 (PERIPHERAL_BASE+0x2000)

#define PWM_BASE                0x40010000

GPIO_Type * const P1 = (GPIO_Type * const)P1_BASE;
PWM_Type * const PWM1 = (PWM_Type * const)PWM_BASE;

//------------------------------------------------------------------------

int main ( void )
{
  PWM1->CR = ~PWM_CR_EN | PWM_CR_DUTY_PERCENT | PWM_CR_P1_PIN0;
  PWM1->PERIODR = 38000;    // 38kHZ
  PWM1->DUTYR = 50;         // 50%
  PWM1->CR |= PWM_CR_EN | PWM_CR_P1_PIN0;

  while(1) {
    asm ("nop");
  }

  return(0);
}

// vim: set ts=2 sw=2 expandtab :
